// <auto-generated />
using EFDataAccessLibrary.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ItemSqliteDb.Migrations
{
    [DbContext(typeof(SqliteContext))]
    [Migration("20230906160532_InitialDbCreate")]
    partial class InitialDbCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.0");

            modelBuilder.Entity("EFDataAccessLibrary.Models.CharacterInventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CharName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Inventories");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ItemContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CharacterInventoryId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContainerInstance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Root")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInventoryId");

                    b.ToTable("ItemContainers");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ItemInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HighInstance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Instance")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LowInstance")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("Ql")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SlotId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SlotId")
                        .IsUnique();

                    b.ToTable("ItemInfos");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Slot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemContainerId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("SlotInstance")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemContainerId");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ItemContainer", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.CharacterInventory", "CharacterInventory")
                        .WithMany("ItemContainers")
                        .HasForeignKey("CharacterInventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.ItemInfo", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.Slot", "Slot")
                        .WithOne("ItemInfo")
                        .HasForeignKey("EFDataAccessLibrary.Models.ItemInfo", "SlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EFDataAccessLibrary.Models.Slot", b =>
                {
                    b.HasOne("EFDataAccessLibrary.Models.ItemContainer", "ItemContainer")
                        .WithMany("Slots")
                        .HasForeignKey("ItemContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
